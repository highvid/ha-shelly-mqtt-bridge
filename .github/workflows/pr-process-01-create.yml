name: Notify Slack of PR Creation

on:
  pull_request:
    types: [opened, reopened]

jobs:
  slack-notification:
    runs-on: ubuntu-latest
    if: 
    steps:
      - name: Get GitHub actor full name
        id: get_actor_name
        run: |
          ACTOR="${{ github.actor }}"
          USER_DATA=$(curl -s https://api.github.com/users/$ACTOR)
          FULL_NAME=$(echo "$USER_DATA" | jq -r '.name')
          echo "actor_full_name=${FULL_NAME}" >> $GITHUB_OUTPUT
      - name: Find Slack ID via Slack API
        id: find_slack_user
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          ACTOR_NAME: ${{ steps.get_actor_name.outputs.actor_full_name }}
        run: |
          echo "Finding user $ACTOR_NAME from slack"
          USERS_LIST=$(curl -s -H "Authorization: Bearer $SLACK_BOT_TOKEN" https://slack.com/api/users.list)
          echo "User data is $USERS_LIST"
          MATCHED_ID=$(echo $USERS_LIST | jq -r --arg NAME "$ACTOR_NAME" '.members[] | select(.real_name==$NAME) | .id')
          if [ -z "$MATCHED_ID" ]; then
            MATCHED_ID="${{ github.actor }}"
          fi
          echo "slack_user_id=$MATCHED_ID" >> $GITHUB_OUTPUT
      - name: Send Slack Notification
        id: slack-message
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "Please review PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}> by <@${{ steps.find_slack_user.outputs.slack_user_id }}>"

      - name: Debug Message TS
        run: |
          echo "Message TS: ${{ steps.slack-message.outputs.ts  }}"
      - name: Save Thread TS
        run: |
          echo "${{ steps.slack-message.outputs.ts  }}" > slack_thread_ts_${{github.event.pull_request.number}}.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "slack-thread-ts-${{ github.event.pull_request.number }}"
          path: "slack_thread_ts_${{github.event.pull_request.number}}.txt"
      - name: Query commit status for latest SHA
        id: status_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          STATUS_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$SHA/status")

          echo "$STATUS_JSON" | jq '.'

          STATE=$(echo "$STATUS_JSON" | jq -r '.statuses[] | select(.context == "ci/circleci: build") | .state' | head -n 1)

          if [ -z "$STATE" ]; then
            STATE="no-status"
          fi

          echo "status=$CIRCLE_STATE" >> $GITHUB_OUTPUT
      - name: Add Status Check Failure
        id: pr-comment-add
        uses: slackapi/slack-github-action@v2.0.0
        if: ${{ steps.status_check.outputs.status == 'failure' }}
        with:
          errors: false
          method: reactions.add
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            timestamp: ${{ steps.slack-message.outputs.ts }}
            name: "rotating-light-red"
      - name: Remove Status Check Failure
        id: pr-comment-remove
        uses: slackapi/slack-github-action@v2.0.0
        if: ${{ steps.status_check.outputs.status == 'success' }}
        with:
          errors: false
          method: reactions.remove
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            timestamp: ${{ steps.slack-message.outputs.ts }}
            name: "rotating-light-red"
